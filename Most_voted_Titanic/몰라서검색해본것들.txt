한줄주석# 여러줄'''

줄바꿔도 코드돌아가게하기 : \


train_df['Fare'].describe() 원하는데이터 describe사용하기

describe 사용시 top : 가장 많이나온 데이터, freq  : top이 나온 빈도수

 include = 'all' 사용시  NaN이 나오는 이유는 number형과 object형을 동시에 나타내려고 하니 한쪽에서 표시가 안됨.

 include = 'O' 알파벳 O임. 오브젝트형만 가져와서 표시하라는것.  그래서 통계적 수치가 없구나!

Embarked == 'Q'인 데이터만 보기위해서는 어떻게해야할까? 
Q인 데이터를 모두 출력하지는 못하지만 train_df['Embarked'].value_counts()를 통해 각각 몇개의 데이터가 있는지 확인.
train_df[train_df['Embarked'] == 'Q'] 를 이용하면 된다!


train_test_split 사용법
x_train, x_valid, y_train, y_valid = train_test_split(data, target, test_size=0.2, shuffle=True, stratify=target, random_state=34)

test_size: 테스트 셋 구성의 비율을 나타냅니다. train_size의 옵션과 반대 관계에 있는 옵션 값이며, 주로 test_size를 지정해 줍니다. 0.2는 전체 데이터 셋의 20%를 test (validation) 셋으로 지정하겠다는 의미입니다. default 값은 0.25 입니다.
shuffle: default=True 입니다. split을 해주기 이전에 섞을건지 여부입니다. 보통은 default 값으로 놔둡니다.
stratify: default=None 입니다. classification을 다룰 때 매우 중요한 옵션값입니다. stratify 값을 target으로 지정해주면 각각의 class 비율(ratio)을 train / validation에 유지해 줍니다. (한 쪽에 쏠려서 분배되는 것을 방지합니다) 만약 이 옵션을 지정해 주지 않고 classification 문제를 다룬다면, 성능의 차이가 많이 날 수 있습니다.
random_state: 세트를 섞을 때 해당 int 값을 보고 섞으며, 하이퍼 파라미터를 튜닝시 이 값을 고정해두고 튜닝해야 매번 데이터셋이 변경되는 것을 방지할 수 있습니다.


-----------



